import React, { useState } from 'react';
import { MagicWandIcon } from './Icons';

// Mock Nosana SDK for demonstration purposes
class Nosana {
  async run({ agent, payload }: { agent: string; payload: any }) {
    console.log(`[Nosana Mock] Running job on agent "${agent}" with payload:`, payload);
    const jobId = `job-${Math.random().toString(36).substr(2, 9)}`;
    
    // Simulate network delay for job submission
    await new Promise(resolve => setTimeout(resolve, 1000));

    return {
      id: jobId,
      result: this._getMockResult(jobId, payload)
    };
  }

  // Simulate polling for a result
  _getMockResult(jobId: string, payload: any) {
    return new Promise(resolve => {
        // Simulate decentralized compute time
        setTimeout(() => {
            console.log(`[Nosana Mock] Job ${jobId} finished.`);
            const responseText = `\n// Generated by Nosana AI Agent for prompt:\n// "${payload.prompt}"\n\nconst PricingTier = ({ title, price, features }) => {\n  return (\n    <div className="pricing-card">\n      <h3 className="title">{title}</h3>\n      <p className="price">{price}</p>\n      <ul className="features">\n        {features.map((feature, index) => (\n          <li key={index}>{feature}</li>\n        ))}\n      </ul>\n      <button className="cta-button">Sign Up</button>\n    </div>\n  );\n};\n`;
            resolve(responseText);
        }, 3000);
    });
  }
}


const CodeAssistant: React.FC = () => {
  const [prompt, setPrompt] = useState<string>('');
  const [generatedCode, setGeneratedCode] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [status, setStatus] = useState<string>('Generated code will appear here...');

  const handleGenerateCode = async () => {
    if (!prompt.trim()) {
      setError('Please enter a prompt.');
      return;
    }

    setIsLoading(true);
    setError(null);
    setGeneratedCode('');

    try {
      setStatus('Submitting job to the Nosana network...');
      const nosana = new Nosana();
      
      const job = await nosana.run({
        agent: 'code-assistant-agent-v1',
        payload: { prompt }
      });
      
      setStatus(`Job [${job.id}] submitted. Waiting for result from the decentralized grid...`);

      const jobResult = await job.result as string;
      
      setGeneratedCode(jobResult.trim());
      setStatus('Job complete. Code generated.');

    } catch (err) {
      console.error(err);
      setError('An error occurred while communicating with the Nosana network.');
      setStatus('Task failed.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="bg-slate-800/50 rounded-xl border border-slate-700 p-6 md:p-8">
      <div className="flex flex-col sm:flex-row items-center justify-center text-center sm:text-left mb-6">
          <div className="bg-slate-700 p-3 rounded-lg text-purple-400 mb-4 sm:mb-0 sm:mr-4">
              <MagicWandIcon />
          </div>
          <div>
              <h2 className="text-3xl font-bold text-white">AI Coding Assistant</h2>
              <p className="text-gray-400 mt-1">
                  Submit a job to the Nosana network to generate code snippets with an AI agent.
              </p>
          </div>
      </div>

      <div className="flex flex-col space-y-4 mb-6">
        <textarea
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder="e.g., 'Create a React component for a responsive pricing table'"
          className="w-full h-24 p-3 bg-slate-800 border border-slate-600 rounded-md resize-none focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors"
          disabled={isLoading}
        />
        <button
          onClick={handleGenerateCode}
          disabled={isLoading}
          className="w-full md:w-auto md:self-end px-6 py-2 bg-purple-600 text-white font-semibold rounded-md hover:bg-purple-700 transition-colors disabled:bg-slate-600 disabled:cursor-not-allowed flex items-center justify-center"
        >
          {isLoading ? (
            <>
              <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Running on Nosana...
            </>
          ) : (
            'Run Job on Nosana'
          )}
        </button>
      </div>
      
      {error && <p className="text-red-400 text-center mb-4">{error}</p>}

      <div className="w-full bg-black/50 rounded-lg border border-slate-700 min-h-[200px] p-4 font-mono text-sm text-gray-200 overflow-x-auto">
        {generatedCode ? (
          <pre><code>{generatedCode}</code></pre>
        ) : (
            <div className="flex items-center justify-center h-full text-slate-500">
                {isLoading ? status : 'Generated code will appear here...'}
            </div>
        )}
      </div>
    </div>
  );
};

export default CodeAssistant;